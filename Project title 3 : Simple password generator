import tkinter as tk
from tkinter import messagebox
import random
import string
import pyperclip

# Define the PasswordGeneratorApp class
class PasswordGeneratorApp:
    # Initialize the application
    def __init__(self, master):
        self.master = master
        self.master.title("Password Generator")  # Set window title
        self.master.geometry("400x250")  # Set window size

        # Create label for password length input
        self.label_length = tk.Label(master, text="Password Length:")
        self.label_length.grid(row=0, column=0, padx=10, pady=10, sticky="w")

        # Create entry widget for password length input
        self.entry_length = tk.Entry(master)
        self.entry_length.insert(0, "12")  # Default length
        self.entry_length.grid(row=0, column=1, padx=10, pady=10)

        # Variables to track the state of checkboxes
        self.upper_var = tk.BooleanVar()
        self.lower_var = tk.BooleanVar()
        self.digit_var = tk.BooleanVar()
        self.symbol_var = tk.BooleanVar()

        # Create checkboxes for character type selection
        self.check_upper = tk.Checkbutton(master, text="Uppercase Letters", variable=self.upper_var)
        self.check_upper.grid(row=1, column=0, padx=10, pady=5, sticky="w")

        self.check_lower = tk.Checkbutton(master, text="Lowercase Letters", variable=self.lower_var)
        self.check_lower.grid(row=2, column=0, padx=10, pady=5, sticky="w")

        self.check_digit = tk.Checkbutton(master, text="Digits", variable=self.digit_var)
        self.check_digit.grid(row=3, column=0, padx=10, pady=5, sticky="w")

        self.check_symbol = tk.Checkbutton(master, text="Symbols", variable=self.symbol_var)
        self.check_symbol.grid(row=4, column=0, padx=10, pady=5, sticky="w")

        # Select all checkboxes by default
        self.check_upper.select()
        self.check_lower.select()
        self.check_digit.select()
        self.check_symbol.select()

        # Create labels for password rules
        self.label_rules = tk.Label(master, text="Password Rules:")
        self.label_rules.grid(row=1, column=1, padx=10, pady=10, sticky="w")

        self.label_rules_desc = tk.Label(master, text="At least one of each selected type")
        self.label_rules_desc.grid(row=2, column=1, padx=10, pady=5, sticky="w")

        # Create button to generate password
        self.generate_button = tk.Button(master, text="Generate Password", command=self.generate_password)
        self.generate_button.grid(row=5, column=0, columnspan=2, padx=10, pady=10)

        # Create button to copy password to clipboard
        self.copy_button = tk.Button(master, text="Copy to Clipboard", command=self.copy_to_clipboard)
        self.copy_button.grid(row=6, column=0, columnspan=2, padx=10, pady=10)

    # Method to generate a password based on user input
    def generate_password(self):
        length = int(self.entry_length.get())  # Get password length
        if length <= 0:  # Check for valid length
            messagebox.showerror("Error", "Password length should be greater than 0")
            return

        selected_chars = ""
        # Include characters based on user selection
        if self.upper_var.get():
            selected_chars += string.ascii_uppercase
        if self.lower_var.get():
            selected_chars += string.ascii_lowercase
        if self.digit_var.get():
            selected_chars += string.digits
        if self.symbol_var.get():
            selected_chars += string.punctuation

        # Check if at least one character type is selected
        if not selected_chars:
            messagebox.showerror("Error", "Please select at least one character type")
            return

        # Generate the password
        password = ''.join(random.choice(selected_chars) for _ in range(length))

        # Show the generated password in a message box
        messagebox.showinfo("Generated Password", password)

    # Method to copy the generated password to clipboard
    def copy_to_clipboard(self):
        generated_password = tk.clipboard_get()  # Get the generated password
        pyperclip.copy(generated_password)  # Copy to clipboard

# Main function to initialize the Tkinter application
def main():
    root = tk.Tk()  # Create main window
    app = PasswordGeneratorApp(root)  # Create PasswordGeneratorApp instance
    root.mainloop()  # Start the Tkinter event loop

# Entry point for the script
if __name__ == "__main__":
    main()
